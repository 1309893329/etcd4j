apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

sourceCompatibility = 1.7
group = 'org.mousio'
version = '2.8.0-SNAPSHOT'

project.ext {
    isTravisBuild = Boolean.valueOf("$System.env.CI_TRAVIS")
    isSnapshot = version.endsWith("-SNAPSHOT")
    mavenDeployUrl = isSnapshot ?
        'https://oss.sonatype.org/content/repositories/snapshots/' :
        'https://oss.sonatype.org/service/local/staging/deploy/maven2/'

    nettyVersion   = '4.1.0.Beta6'
    jacksonVersion = '2.6.1'
    slf4jVersion   = '1.7.12'
    junitVersion   = '4.12'

    if(!project.hasProperty('sonatypeUsername') && !project.hasProperty('sonatypePassword')) {
        sonatypeUsername = "$System.env.CI_DEPLOY_USERNAME"
        sonatypePassword = "$System.env.CI_DEPLOY_PASSWORD"
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    client {
        java {
            srcDir 'src/client/java'
        }
    }
    main {
        java {
            compileClasspath += client.output
            srcDir 'src/main/java'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

dependencies {
    clientCompile "io.netty:netty-codec-http:$nettyVersion"
    clientCompile "io.netty:netty-handler:$nettyVersion"
    clientCompile "org.slf4j:slf4j-api:$slf4jVersion"

    compile sourceSets.client.compileClasspath
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "io.netty:netty-codec-http:$nettyVersion"
    compile "io.netty:netty-handler:$nettyVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"

    testCompile sourceSets.main.compileClasspath
    testCompile "junit:junit:$junitVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jVersion"
}

javadoc {
    source sourceSets.main.allJava
    source sourceSets.client.allJava
}

jar {
    from sourceSets.main.output
    from sourceSets.client.output
}

idea {
    module {
        scopes.COMPILE.plus += configurations.clientCompile.all
    }
}

task jarClient(type: Jar) {
    classifier = 'client'
    from sourceSets.client.output
    manifest {
        attributes 'Implementation-Title': baseName, 'Implementation-Version': version
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.client.allSource
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
    archives jarClient
}

signing {
    // Do not sigh jars on trvis-ci 
    required { 
        !isTravisBuild
    }

    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: mavenDeployUrl) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'etcd4j'
                packaging 'jar'
                description 'etcd4j is a Java/Netty based etcd client'
                url 'https://github.com/jurmous/etcd4j'

                scm {
                    url 'scm:git@github.com:jurmous/etcd4j.git'
                    connection 'scm:git@github.com:jurmous/etcd4j.git'
                    developerConnection 'scm:git@github.com:jurmous/etcd4j.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jurmous'
                        name 'Jurriaan Mous'
                    }
                }
            }
        }
    }
}
